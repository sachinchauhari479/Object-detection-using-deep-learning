# -*- coding: utf-8 -*-
"""student selection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bCF51T_Mzzu0lzIZRl5qTMG8JUPxttlm
"""

import numpy as np
import pandas as pd

from google.colab import files
files.upload()

data = pd.read_csv("collegePlace.csv")

print(data.columns)

data.head(10)

data.tail(10)

data.describe()

data.isnull()

data.shape

data.info()

data.isnull().sum()

data['PlacedOrNot'].value_counts()

import seaborn as sns
import matplotlib.pyplot as plt

sns.pairplot(data)
plt.show()

plt.figure()
sns.heatmap(data.corr(),cmap='coolwarm')
plt.show()

sns.countplot(data['PlacedOrNot'],label="count")

sns.countplot(data['CGPA'],label="count")

sns.countplot(data['Internships'],label="count")

X = data.drop(columns = ['Stream','PlacedOrNot'],axis = 1)
Y = data['PlacedOrNot']
print(X.shape,Y.shape)

X

data.replace({'Gender':{'Male':0,'Female':1}},inplace=True)

X = data.drop(columns = ['Stream','PlacedOrNot'],axis = 1)
Y = data['PlacedOrNot']
print(X.shape,Y.shape)

print(X)

print(Y)

from sklearn import datasets,linear_model,metrics
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=0)

X_train

X_test

Y_train

Y_test

lin_reg=linear_model.LinearRegression()

lin_reg.fit(X_train,Y_train)

print('\n coefficient:\n',lin_reg.coef_)

print('\n intercept:\n',lin_reg.intercept_)

print('\n variance score:\n',lin_reg.score(X_train,Y_train))

predict = lin_reg.predict(X_test)
prediction =predict

expected = Y_test

fig = plt.figure()
plt.scatter(Y_test,prediction)
plt.title('Actual versus Prediction ')
plt.xlabel('Actual', fontsize=20)                         
plt.ylabel('Predicted', fontsize=20)

#trying the same with a reg plot(optonal)
sns.regplot(Y_test,prediction)
plt.title('Actual versus Prediction ')
plt.xlabel('Actual', fontsize=20)                         
plt.ylabel('Predicted', fontsize=20)

# Commented out IPython magic to ensure Python compatibility.
print("mean squared error: %.2f\n"
#           % mean_squared_error(Y_test,prediction))

from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=0)

logmodel = LogisticRegression()

logmodel.fit(X_train,Y_train)

Y_pred =logmodel.predict(X_test)

Y_pred[:20]

print("traing set accuracy: {:.3f}".format(logmodel.score(X_train,Y_train)))
print("test set accuracy: {:.3f}".format(logmodel.score(X_test,Y_test)))

from sklearn.metrics import confusion_matrix,classification_report

confusion_matrix(Y_test,Y_pred)

# Commented out IPython magic to ensure Python compatibility.
print("mean squared error:%.2f\n"
#                  % mean_squared_error(Y_test,Y_pred))

from sklearn.metrics import roc_auc_score,roc_curve
import matplotlib.pyplot as plt

#ROC AUC score calculation
logit_roc_auc =roc_auc_score(Y_test,logmodel.predict(X_test))
print("The ROC AUC score is "+str(logit_roc_auc))

#displaying ROC curve
fpr,tpr,thresholds = roc_curve(Y_test,logmodel.predict_proba(X_test)[:,1])
plt.figure()
plt.plot(fpr,tpr,label="Logistic Regression (area = %0.2f)"%logit_roc_auc)
plt.xlim([0.0,1.0])
plt.ylim([0.0,1.05])
plt.plot([0,1],[0,1],'r--')
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("Receiver Operating Characteristics")
plt.legend(loc="lower right")
plt.show()

X_train

Age=int(input("enter your age between(18 to 24"))
Gender=int(input("enter sex 0 for mail and 1 for femail")) 
Internships=int(input("enter the your internship between 1 t0 3"))
CGPA=int(input('enter your cgpa between 5 t0 10'))
Hostel=int(input("enter your hosle in form of 0 or 1"))
HistoryOfBacklogs=int(input('how many backlog'))
newx=[[Age,Gender,Internships,CGPA,Hostel,HistoryOfBacklogs,]]


newy = logmodel.predict(newx)

if (newy[0]==1):
    print('Congratulations you have been Placed')
else:
    print('Unfortunately you need a retake')